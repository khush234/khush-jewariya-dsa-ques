#include <stdio.h>
#include <ctype.h>  // For isdigit function
#include <stdlib.h> // For atoi function

#define MAX 100

// Stack structure
struct Stack {
    int top;
    int array[MAX];
};

// Function to initialize the stack
void initStack(struct Stack* stack) {
    stack->top = -1;
}

// Function to check if stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to check if stack is full
int isFull(struct Stack* stack) {
    return stack->top == MAX - 1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, int value) {
    if (!isFull(stack)) {
        stack->array[++stack->top] = value;
    }
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (!isEmpty(stack)) {
        return stack->array[stack->top--];
    }
    return -1;  // Return -1 if stack is empty
}

// Function to evaluate postfix expression
int evaluatePostfix(char* exp) {
    struct Stack stack;
    initStack(&stack);
    int i;

    // Traverse through the expression
    for (i = 0; exp[i] != '\0'; i++) {
        // If the character is an operand (digit), push it to stack
        if (isdigit(exp[i])) {
            push(&stack, exp[i] - '0');  // Convert character to integer
        }
        // If the character is an operator, pop two operands and apply the operator
        else {
            int val2 = pop(&stack);  // Pop the second operand
            int val1 = pop(&stack);  // Pop the first operand

            switch (exp[i]) {
                case '+': push(&stack, val1 + val2); break;
                case '-': push(&stack, val1 - val2); break;
                case '*': push(&stack, val1 * val2); break;
                case '/': push(&stack, val1 / val2); break;
            }
        }
    }

    // The result is stored on top of the stack
    return pop(&stack);
}

int main() {
    char exp[MAX];

    printf("Enter postfix expression: ");
    scanf("%s", exp);

    printf("Result of the postfix expression: %d\n", evaluatePostfix(exp));

    return 0;
}
