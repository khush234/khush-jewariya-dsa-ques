#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the circular linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the circular linked list
void insertAtEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        newNode->next = *head;
    } else {
        struct Node* temp = *head;
        while (temp->next != *head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = *head;
    }
    printf("Node inserted at the end.\n");
}

// Function to insert a node before a specified position
void insertBeforePosition(struct Node** head, int data, int position) {
    struct Node* newNode = createNode(data);
    if (*head == NULL || position <= 1) {
        newNode->next = *head;
        struct Node* temp = *head;
        if (*head != NULL) {
            while (temp->next != *head) {
                temp = temp->next;
            }
            temp->next = newNode;
        } else {
            newNode->next = newNode;
        }
        *head = newNode;
        printf("Node inserted before position %d.\n", position);
        return;
    }
    
    struct Node* temp = *head;
    for (int i = 1; temp->next != *head && i < position - 1; i++) {
        temp = temp->next;
    }
    newNode->next = temp->next;
    temp->next = newNode;
    printf("Node inserted before position %d.\n", position);
}

// Function to delete the first node of the circular linked list
void deleteFirstNode(struct Node** head) {
    if (*head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = *head;
    if ((*head)->next == *head) {
        free(*head);
        *head = NULL;
    } else {
        struct Node* last = *head;
        while (last->next != *head) {
            last = last->next;
        }
        *head = (*head)->next;
        last->next = *head;
        free(temp);
    }
    printf("First node deleted.\n");
}

// Function to delete a node after a specified position
void deleteAfterPosition(struct Node** head, int position) {
    if (*head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = *head;
    for (int i = 1; temp->next != *head && i < position; i++) {
        temp = temp->next;
    }

    struct Node* nodeToDelete = temp->next;
    if (nodeToDelete == *head) {
        deleteFirstNode(head);
    } else {
        temp->next = nodeToDelete->next;
        free(nodeToDelete);
        printf("Node deleted after position %d.\n", position);
    }
}

// Function to traverse the circular linked list
void traverse(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = head;
    printf("Circular Linked List: ");
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(head)\n");
}

// Main function to demonstrate menu-driven circular linked list operations
int main() {
    struct Node* head = NULL;
    int choice, value, position;

    while (1) {
        printf("\n--- Circular Linked List Operations ---\n");
        printf("1. Insert node at end\n");
        printf("2. Insert node before position\n");
        printf("3. Delete first node\n");
        printf("4. Delete node after position\n");
        printf("5. Traverse the list\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to insert at end: ");
                scanf("%d", &value);
                insertAtEnd(&head, value);
                break;
            case 2:
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                printf("Enter the position: ");
                scanf("%d", &position);
                insertBeforePosition(&head, value, position);
                break;
            case 3:
                deleteFirstNode(&head);
                break;
            case 4:
                printf("Enter the position after which to delete: ");
                scanf("%d", &position);
                deleteAfterPosition(&head, position);
                break;
            case 5:
                traverse(head);
                break;
            case 6:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
